{"version":3,"sources":["infoButtons.js","App.js","serviceWorker.js","index.js","assets/images/background.png","assets/images/01.png","assets/images/02.png","assets/images/03.png","assets/images/04.png","assets/images/05.png","assets/images/06.png"],"names":["buttons","id","img","button1","url","xPos","yPos","button2","button3","button4","button5","button6","bgDim","App","useState","w","window","innerWidth","h","innerHeight","screenSize","setScreenSize","modalVisible","setModalVisible","buttonNaturalSizes","setButtonNaturalSizes","bgNaturalSize","setBgNaturalSize","buttonHeights","setButtonHeights","buttonPos","setButtonPos","updateWindowDimensions","useEffect","addEventListener","convertXToScreenRes","xVal","bgSize","imgWidth","getImageWidth","leftMargin","convertYToScreenRes","yVal","commonButtonStyles","position","cursor","className","map","button","key","src","onLoad","target","newButtonHeights","height","naturalHeight","newButtonNatSizes","naturalWidth","onButtonImgLoad","style","alt","onClick","bgImage","bgNatSize","left","top","title","visible","onCancel","width","footer","frameborder","allow","allowfullscreen","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"uVAOaA,EAAU,CACnB,CACIC,GAAI,EACJC,IAAKC,IACLC,IAAK,cACLC,KAAM,IACNC,KAAM,MAEV,CACIL,GAAI,EACJC,IAAKK,IACLH,IAAK,cACLC,KAAM,IACNC,KAAM,MAEV,CACIL,GAAI,EACJC,IAAKM,IACLJ,IAAK,cACLC,KAAM,KACNC,KAAM,MAEV,CACIL,GAAI,EACJC,IAAKO,IACLL,IAAK,cACLC,KAAM,KACNC,KAAM,MAEV,CACIL,GAAI,EACJC,IAAKQ,IACLN,IAAK,cACLC,KAAM,KACNC,KAAM,KAEV,CACIL,GAAI,EACJC,IAAKS,IACLP,IAAK,cACLC,KAAM,KACNC,KAAM,OCpCRM,EAAsB,KA2GbC,MAzGf,WAAgB,IAAD,EACuBC,mBAAS,CAAEC,EAAGC,OAAOC,WAAYC,EAAGF,OAAOG,cADlE,mBACNC,EADM,KACMC,EADN,OAE2BP,mBAAS,MAFpC,mBAENQ,EAFM,KAEQC,EAFR,OAGuCT,mBAAS,IAHhD,mBAGNU,EAHM,KAGcC,EAHd,OAI6BX,mBAAS,MAJtC,mBAINY,EAJM,KAISC,EAJT,OAM6Bb,mBAAS,IANtC,mBAMNc,EANM,KAMSC,EANT,OAOqBf,mBAAS,IAP9B,mBAONgB,EAPM,KAOKC,EAPL,KAUPC,EAAyB,WAC7BX,EAAc,CAAEN,EAAGC,OAAOC,WAAYC,EAAGF,OAAOG,eAGlDc,qBAAU,kBAAMjB,OAAOkB,iBAAiB,SAAUF,KAAyB,CAACR,EAAoBE,IAGhG,IAuBMS,EAAsB,SAACC,EAAMC,GACjC,IAAMC,EAJc,SAACD,GAAD,OAAYA,GAAYjB,EAAWF,EAAImB,EAAOtB,EAAKsB,EAAOnB,EAI7DqB,CAAcF,GAC/B,GAAIC,EAAWlB,EAAWL,EAAG,CAC3B,IAAMyB,GAAcpB,EAAWL,EAAIuB,GAAY,EAC/C,OAAQF,EAAOE,EAAWD,EAAOtB,EAAKyB,EAGtC,QADsBF,EAAWlB,EAAWL,GAAK,EAC3BqB,EAAOE,EAAWD,EAAOtB,GAI7C0B,EAAsB,SAACC,EAAML,GACjC,OAAQK,EAAOtB,EAAWF,EAAImB,EAAOnB,GAGjCyB,EAAqB,CACzBC,SAAU,WACVC,OAAQ,WAGV,OACE,oCACE,yBAAKC,UAAU,4BACZ9C,EAAQ+C,KAAI,SAAAC,GAAM,OACjB,yBACEC,IAAKD,EAAO/C,GACZiD,IAAKF,EAAO9C,IACZiD,OAAQ,gBAAWjD,EAAX,EAAGkD,OAAH,OAxCM,SAACnD,EAAIC,GAC3B,IAAImD,EAAgB,YAAOzB,GAC3ByB,EAAiBpD,GAAM,CAAEqD,OAAQpD,EAAIqD,cAAgBnC,EAAWF,EAAIN,GACpEiB,EAAiBwB,GAEjB,IAAIG,EAAoBhC,GAAkB,YAAQA,GAClDgC,EAAkBvD,GAAM,CAAEiB,EAAGhB,EAAIqD,cAAexC,EAAGb,EAAIuD,cACvDhC,EAAsB+B,GAiCeE,CAAgBV,EAAO/C,GAAIC,IACxDyD,MAAK,uCAAOhB,GAAuBb,EAAUkB,EAAO/C,KAAQ2B,EAAcoB,EAAO/C,KACjF2D,IAAI,SACJC,QAAS,WACPtC,EAAgByB,EAAO/C,UAI7B,yBACEiD,IAAKY,IACLX,OA5DY,SAAC,GAAqB,IAAXjD,EAAU,EAAlBkD,OACfW,EAAY,CAAE7C,EAAGhB,EAAIqD,cAAexC,EAAGb,EAAIuD,cACjD9B,EAAiBoC,GAEjBhC,EAAa/B,EAAQ+C,KAAI,SAAAC,GAAM,MAAK,CAClCgB,KAAM7B,EAAoBa,EAAO3C,KAAM0D,GACvCE,IAAKxB,EAAoBO,EAAO1C,KAAMyD,SAuDlCjB,UAAU,0BACVc,IAAI,qBAIP5D,EAAQ+C,KAAI,SAAAC,GAAM,OACjB,kBAAC,IAAD,CACEC,IAAKD,EAAO/C,GACZiE,MAAM,cACNC,QAAS7C,IAAiB0B,EAAO/C,GACjCmE,SAAU,kBAAM7C,EAAgB,OAChC8C,MAAO,IACPC,OAAQ,IAER,4BACED,MAAM,MACNf,OAAO,MACPJ,IAAG,wCAAmCF,EAAO5C,KAC7CmE,YAAY,IACZC,MAAM,0EAA0EC,iBAAe,UCnGvFC,QACW,cAA7B1D,OAAO2D,SAASC,UAEe,UAA7B5D,OAAO2D,SAASC,UAEhB5D,OAAO2D,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,mBEzI5BC,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,gC,mBCA3CD,EAAOC,QAAU,IAA0B,gC,mBCA3CD,EAAOC,QAAU,IAA0B,gC,mBCA3CD,EAAOC,QAAU,IAA0B,gC,mBCA3CD,EAAOC,QAAU,IAA0B,gC,mBCA3CD,EAAOC,QAAU,IAA0B,gC","file":"static/js/main.2eedba97.chunk.js","sourcesContent":["import button1 from './assets/images/01.png';\r\nimport button2 from './assets/images/02.png';\r\nimport button3 from './assets/images/03.png';\r\nimport button4 from './assets/images/04.png';\r\nimport button5 from './assets/images/05.png';\r\nimport button6 from './assets/images/06.png';\r\n\r\nexport const buttons = [\r\n    {\r\n        id: 0,\r\n        img: button1,\r\n        url: 'ISnY3CujF2E', //arc de st marti\r\n        xPos: 110,\r\n        yPos: 1148\r\n    },\r\n    {\r\n        id: 1,\r\n        img: button2,\r\n        url: '1XMV-DHpnz4', //llibres prota\r\n        xPos: 703,\r\n        yPos: 1484\r\n    },\r\n    {\r\n        id: 2,\r\n        img: button3, //poster escola argentona\r\n        url: 'glAoQRCGT8E',\r\n        xPos: 1705,\r\n        yPos: 1301\r\n    },\r\n    {\r\n        id: 3,\r\n        img: button4,\r\n        url: 'Zs0bWn4LKjI', //lluna cove\r\n        xPos: 2365,\r\n        yPos: 1041\r\n    },\r\n    {\r\n        id: 4,\r\n        img: button5,\r\n        url: 'NynePjXVMUk', //caixa sorpreses\r\n        xPos: 3596,\r\n        yPos: 940\r\n    },\r\n    {\r\n        id: 5,\r\n        img: button6,\r\n        url: '7-nmhbdGcIQ', // postr aixernador\r\n        xPos: 3503,\r\n        yPos: 1230\r\n    },\r\n\r\n];","import React, { useState, useEffect } from 'react';\nimport './assets/styles/bootstrap.min.css'\nimport './App.css';\nimport 'antd/dist/antd.css';\n\nimport bgImage from './assets/images/background.png';\n\nimport { Modal } from 'antd';\nimport { buttons } from './infoButtons';\n\n\n\nconst bgDim = { w: 4000, h: 2250 };\n\nfunction App() {\n  const [screenSize, setScreenSize] = useState({ w: window.innerWidth, h: window.innerHeight });\n  const [modalVisible, setModalVisible] = useState(null);\n  const [buttonNaturalSizes, setButtonNaturalSizes] = useState([]);\n  const [bgNaturalSize, setBgNaturalSize] = useState(null);\n\n  const [buttonHeights, setButtonHeights] = useState([]);\n  const [buttonPos, setButtonPos] = useState([]);\n\n\n  const updateWindowDimensions = () => {\n    setScreenSize({ w: window.innerWidth, h: window.innerHeight });\n  };\n\n  useEffect(() => window.addEventListener('resize', updateWindowDimensions), [buttonNaturalSizes, bgNaturalSize]);\n\n\n  const onBgImgLoad = ({ target: img }) => {\n    const bgNatSize = { h: img.naturalHeight, w: img.naturalWidth };\n    setBgNaturalSize(bgNatSize);\n\n    setButtonPos(buttons.map(button => ({\n      left: convertXToScreenRes(button.xPos, bgNatSize),\n      top: convertYToScreenRes(button.yPos, bgNatSize)\n    })));\n  }\n\n  const onButtonImgLoad = (id, img) => {\n    let newButtonHeights = [...buttonHeights];\n    newButtonHeights[id] = { height: img.naturalHeight * screenSize.h / bgDim.h };\n    setButtonHeights(newButtonHeights);\n\n    let newButtonNatSizes = buttonNaturalSizes && [...buttonNaturalSizes];\n    newButtonNatSizes[id] = { h: img.naturalHeight, w: img.naturalWidth };\n    setButtonNaturalSizes(newButtonNatSizes);\n  }\n\n  const getImageWidth = (bgSize) => bgSize && ((screenSize.h * bgSize.w) / bgSize.h);\n\n  //donat una X de la imatge (en pixels), vull la X de la pantalla (pot estar fora de la pantalla)\n  const convertXToScreenRes = (xVal, bgSize) => {\n    const imgWidth = getImageWidth(bgSize);\n    if (imgWidth < screenSize.w) {\n      const leftMargin = (screenSize.w - imgWidth) / 2;\n      return (xVal * imgWidth / bgSize.w) + leftMargin\n    } else {\n      const imageStartX = -(imgWidth - screenSize.w) / 2;\n      return imageStartX + (xVal * imgWidth / bgSize.w);\n    }\n  }\n\n  const convertYToScreenRes = (yVal, bgSize) => {\n    return (yVal * screenSize.h / bgSize.h);\n  }\n\n  const commonButtonStyles = {\n    position: 'absolute',\n    cursor: 'pointer'\n  }\n\n  return (\n    <>\n      <div className=\"h-100 d-flex flex-column\">\n        {buttons.map(button => (\n          <img\n            key={button.id}\n            src={button.img}\n            onLoad={({ target: img }) => onButtonImgLoad(button.id, img)}\n            style={{ ...commonButtonStyles, ...buttonPos[button.id], ...buttonHeights[button.id] }}\n            alt=\"button\"\n            onClick={() => {\n              setModalVisible(button.id)\n            }}\n          />\n        ))}\n        <img\n          src={bgImage}\n          onLoad={onBgImgLoad}\n          className=\"h-100 align-self-center\"\n          alt=\"backgound image\"\n        />\n      </div >\n\n      {buttons.map(button =>\n        <Modal\n          key={button.id}\n          title=\"GrÃ cies!\"\n          visible={modalVisible === button.id}\n          onCancel={() => setModalVisible(null)}\n          width={600}\n          footer={[]}\n        >\n          <iframe\n            width=\"560\"\n            height=\"315\"\n            src={`https://www.youtube.com/embed/${button.url}`}\n            frameborder=\"0\"\n            allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen>\n          </iframe>\n        </Modal>\n      )}\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/background.59b697db.png\";","module.exports = __webpack_public_path__ + \"static/media/01.a266e785.png\";","module.exports = __webpack_public_path__ + \"static/media/02.3a9ab7b7.png\";","module.exports = __webpack_public_path__ + \"static/media/03.93f415a8.png\";","module.exports = __webpack_public_path__ + \"static/media/04.64c5d6aa.png\";","module.exports = __webpack_public_path__ + \"static/media/05.fb3ab8b4.png\";","module.exports = __webpack_public_path__ + \"static/media/06.914ea944.png\";"],"sourceRoot":""}